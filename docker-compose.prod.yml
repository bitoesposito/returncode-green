services:

  # Nginx reverse proxy with load balancing
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Multiple backend instances for load balancing
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/src/app
      - /src/app/node_modules
    command: npm run start:dev
    env_file:
      - .env
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - DATABASE_URL=${DATABASE_URL}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PORT=${BE_PORT}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - ADMIN_ROLE=${ADMIN_ROLE}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_PORT=${MINIO_PORT}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_USE_SSL=${MINIO_USE_SSL}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  frontend:
    build:
      dockerfile: Dockerfile
      context: ./frontend
      target: development
    volumes:
      - ./frontend:/frontend
      - /frontend/node_modules
    environment:
      - NODE_ENV=development
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4200"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  backend-seed:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/src/app
      - /src/app/node_modules
    working_dir: /src/app
    command: sh -c "sleep 10 && ls -la && ls -la src/utilis/ && npm run seed-admin"
    env_file:
      - .env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - ADMIN_ROLE=${ADMIN_ROLE}
    depends_on:
      backend:
        condition: service_started
    restart: "no"

  postgres:
    image: postgres:17
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_HASHED_PASSWORD: ${ADMIN_PASSWORD}
    ports:
      - 35000:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server --console-address ":9001" /data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Backup automation services
  backup-cron:
    image: curlimages/curl:latest
    volumes:
      - ./backend/backups:/backups
      - ./scripts:/scripts
    entrypoint: ["/bin/sh", "-c", "while true; do /scripts/backup-cron.sh; sleep 21600; done"]
    depends_on:
      - backend
    restart: unless-stopped

  cleanup-backups:
    image: alpine:latest
    volumes:
      - ./backend/backups:/backups
      - ./scripts:/scripts
    entrypoint: ["/bin/sh", "-c", "while true; do /scripts/cleanup-backups.sh; sleep 86400; done"]
    depends_on:
      - backend
    restart: unless-stopped

  verify-backups:
    image: alpine:latest
    volumes:
      - ./backend/backups:/backups
      - ./scripts:/scripts
    entrypoint: ["/bin/sh", "-c", "while true; do /scripts/verify-backups.sh; sleep 43200; done"]
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
  minio_data:
  nginx_logs: