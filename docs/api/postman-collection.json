{
	"info": {
		"_postman_id": "fff5d177-018c-48b1-a1bc-23101cfb22ad",
		"name": "Pandom Stack API",
		"description": "Complete API collection for Pandom Stack - Security-First Application Boilerplate with httpOnly cookie-based authentication",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44197133",
		"_collection_link": "https://vito-3933964.postman.co/workspace/vito's-Workspace~3d5b3401-3263-4407-8b2a-7460cc1524d2/collection/44197133-fff5d177-018c-48b1-a1bc-23101cfb22ad?action=share&source=collection_link&creator=44197133"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"newuser@example.com\",\n  \"password\": \"SecurePass123!\",\n  \"confirmPassword\": \"SecurePass123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Register a new user account with comprehensive validation. Email must be valid format, password must meet security requirements (min 8 chars, uppercase, lowercase, number, special char), confirmPassword must match password."
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.success && response.data) {",
									"        pm.collectionVariables.set('user_uuid', response.data.user.uuid);",
									"        pm.collectionVariables.set('session_id', response.data.session_id);",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{admin_email}}\",\n  \"password\": \"{{admin_password}}\",\n  \"rememberMe\": false\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Authenticate user and receive httpOnly cookies"
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/refresh",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"refresh"
							]
						},
						"description": "Refresh access token using httpOnly cookies"
					},
					"response": []
				},
				{
					"name": "Get Current User",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"me"
							]
						},
						"description": "Get current authenticated user data"
					},
					"response": []
				},
				{
					"name": "Verify Email",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"verification-token-from-email\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/verify",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"verify"
							]
						},
						"description": "Verify user email with token"
					},
					"response": []
				},
				{
					"name": "Forgot Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@example.com\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/forgot-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"forgot-password"
							]
						},
						"description": "Request password reset email"
					},
					"response": []
				},
				{
					"name": "Reset Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@example.com\",\n  \"otp\": \"123456\",\n  \"newPassword\": \"NewSecurePass123!\",\n  \"confirmPassword\": \"NewSecurePass123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/reset-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"reset-password"
							]
						},
						"description": "Reset password with OTP"
					},
					"response": []
				},
				{
					"name": "Resend Verification",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@example.com\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/resend-verification",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"resend-verification"
							]
						},
						"description": "Resend email verification"
					},
					"response": []
				},
				{
					"name": "Logout",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"logout"
							]
						},
						"description": "Logout user and clear httpOnly cookies"
					},
					"response": []
				}
			],
			"description": "Authentication and authorization endpoints with httpOnly cookie-based auth"
		},
		{
			"name": "User Profile",
			"item": [
				{
					"name": "Get Profile",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"profile"
							]
						},
						"description": "Get current user profile"
					},
					"response": []
				},
				{
					"name": "Update Profile",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"tags\": [\"developer\", \"fullstack\", \"typescript\", \"nestjs\", \"angular\"],\n  \"metadata\": {\n    \"role\": \"senior_developer\",\n    \"preferences\": {\n      \"theme\": \"dark\",\n      \"language\": \"en\",\n      \"notifications\": true,\n      \"timezone\": \"UTC\"\n    },\n    \"skills\": {\n      \"programming_languages\": [\"TypeScript\", \"JavaScript\", \"Python\"],\n      \"frameworks\": [\"NestJS\", \"Angular\", \"React\"],\n      \"experience_years\": 5\n    },\n    \"certifications\": {\n      \"completed_courses\": 12,\n      \"total_certificates\": 8,\n      \"latest_achievement\": \"Advanced TypeScript Development\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"profile"
							]
						},
						"description": "Update user profile with comprehensive validation. Tags: max 20 unique strings (50 chars each). Metadata: max 10KB JSON object with flexible structure for user preferences, skills, and achievements."
					},
					"response": []
				}
			],
			"description": "User profile management endpoints"
		},
		{
			"name": "Security",
			"item": [
				{
					"name": "Get Security Logs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/security/logs?page=1&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"security",
								"logs"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						},
						"description": "Get user security logs with pagination"
					},
					"response": []
				},
				{
					"name": "Get Active Sessions",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/security/sessions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"security",
								"sessions"
							]
						},
						"description": "Get user active sessions"
					},
					"response": []
				},
				{
					"name": "Terminate Session",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/security/sessions/{{session_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"security",
								"sessions",
								"{{session_id}}"
							]
						},
						"description": "Terminate specific session"
					},
					"response": []
				},
				{
					"name": "Terminate All Sessions",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/security/sessions/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"security",
								"sessions",
								"all"
							]
						},
						"description": "Terminate all sessions except current"
					},
					"response": []
				},
				{
					"name": "Download User Data",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/security/download-data",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"security",
								"download-data"
							]
						},
						"description": "Request user data export (GDPR)"
					},
					"response": []
				},
				{
					"name": "Delete Account",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"confirmation\": \"DELETE_MY_ACCOUNT\",\n  \"reason\": \"No longer need the service\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/security/delete-account",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"security",
								"delete-account"
							]
						},
						"description": "Delete user account (GDPR Right to Erasure)"
					},
					"response": []
				}
			],
			"description": "Security and GDPR compliance endpoints"
		},
		{
			"name": "Admin",
			"item": [
				{
					"name": "Get Users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/users?page=1&limit=10&search=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "search",
									"value": ""
								}
							]
						},
						"description": "Get users list with pagination and search"
					},
					"response": []
				},
				{
					"name": "Delete User",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/users/{{user_uuid}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"users",
								"{{user_uuid}}"
							]
						},
						"description": "Delete user account (admin only)"
					},
					"response": []
				},
				{
					"name": "Get System Metrics",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/metrics",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"metrics"
							]
						},
						"description": "Get system metrics overview"
					},
					"response": []
				},
				{
					"name": "Get Detailed Metrics",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/metrics/detailed",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"metrics",
								"detailed"
							]
						},
						"description": "Get detailed system metrics"
					},
					"response": []
				},
				{
					"name": "Get Audit Logs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/audit-logs?page=1&limit=50",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"audit-logs"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "50"
								}
							]
						},
						"description": "Get system audit logs"
					},
					"response": []
				}
			],
			"description": "Administrative endpoints (admin role required)"
		},
		{
			"name": "Certificates",
			"item": [
				{
					"name": "Generate Certificate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    if (response.success && response.data && response.data.id) {",
									"        pm.collectionVariables.set('certificate_id', response.data.id);",
									"        console.log('Certificate generated with ID:', response.data.id);",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_uuid\": \"{{user_uuid}}\",\n  \"course_name\": \"Advanced TypeScript Development\",\n  \"description\": \"Comprehensive course covering advanced TypeScript concepts and best practices\",\n  \"issued_date\": \"2024-01-15T10:30:00.000Z\",\n  \"metadata\": {\n    \"instructor\": \"John Doe\",\n    \"duration_hours\": 40,\n    \"completion_score\": 95,\n    \"course_type\": \"online\",\n    \"difficulty_level\": \"advanced\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/certificates",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"certificates"
							]
						},
						"description": "Generate a new digital certificate for a user (Admin only). Automatically creates a TXT file with course information and uploads it to MinIO storage. No file upload required - certificate is generated from course data. Auto-captures certificate_id for subsequent requests."
					},
					"response": []
				},
				{
					"name": "Generate Certificate (Test Data)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    if (response.success && response.data && response.data.id) {",
									"        pm.collectionVariables.set('test_certificate_id', response.data.id);",
									"        console.log('Test certificate generated with ID:', response.data.id);",
									"        console.log('Certificate file type:', response.data.content_type);",
									"        console.log('Certificate file size:', response.data.file_size, 'bytes');",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_uuid\": \"{{user_uuid}}\",\n  \"course_name\": \"NestJS Fundamentals\",\n  \"description\": \"Learn the fundamentals of NestJS framework for building scalable Node.js applications\",\n  \"issued_date\": \"2024-01-20T14:00:00.000Z\",\n  \"metadata\": {\n    \"instructor\": \"Mario Rossi\",\n    \"duration_hours\": 25,\n    \"completion_score\": 88,\n    \"course_type\": \"workshop\",\n    \"difficulty_level\": \"intermediate\",\n    \"prerequisites\": [\"JavaScript\", \"Node.js\"],\n    \"certificate_version\": \"1.0\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/certificates",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"certificates"
							]
						},
						"description": "Generate a test certificate with different course data to verify TXT file generation and MinIO upload functionality."
					},
					"response": []
				},
				{
					"name": "Verify Certificate",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/certificates/{{certificate_id}}/verify",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"certificates",
								"{{certificate_id}}",
								"verify"
							]
						},
						"description": "Verify certificate authenticity using cryptographic signature verification. Public endpoint - no authentication required."
					},
					"response": []
				},
				{
					"name": "Download Certificate",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/certificates/{{certificate_id}}/download",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"certificates",
								"{{certificate_id}}",
								"download"
							]
						},
						"description": "Download certificate file. Users can only download their own certificates unless they are admin."
					},
					"response": []
				},
				{
					"name": "Revoke Certificate",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"reason\": \"Certificate issued in error - incorrect course completion data\",\n  \"additional_details\": \"Student did not meet the minimum requirements for course completion\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/certificates/{{certificate_id}}/revoke",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"certificates",
								"{{certificate_id}}",
								"revoke"
							]
						},
						"description": "Revoke a certificate (Admin only). Marks certificate as invalid for future verifications. Requires reason (10-500 characters)."
					},
					"response": []
				},
				{
					"name": "Get User Certificates",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/certificates/user/{{user_uuid}}?page=1&limit=10&course_name=&revoked=false&sort_by=issued_date&sort_order=desc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"certificates",
								"user",
								"{{user_uuid}}"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "Page number for pagination (1-based)"
								},
								{
									"key": "limit",
									"value": "10",
									"description": "Number of items per page"
								},
								{
									"key": "course_name",
									"value": "",
									"description": "Filter by course name (partial match)"
								},
								{
									"key": "revoked",
									"value": "false",
									"description": "Filter by revocation status (true/false)"
								},
								{
									"key": "sort_by",
									"value": "issued_date",
									"description": "Sort field (issued_date, course_name, etc.)"
								},
								{
									"key": "sort_order",
									"value": "desc",
									"description": "Sort order (asc or desc)"
								}
							]
						},
						"description": "List certificates belonging to a user. Users can only list their own certificates unless they are admin."
					},
					"response": []
				}
			],
			"description": "Certificate management and validation endpoints with comprehensive validation system"
		},
		{
			"name": "Resilience",
			"item": [
				{
					"name": "Get System Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/resilience/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"resilience",
								"status"
							]
						},
						"description": "Get system health status"
					},
					"response": []
				},
				{
					"name": "Create Backup",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/resilience/backup",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"resilience",
								"backup"
							]
						},
						"description": "Create system backup"
					},
					"response": []
				},
				{
					"name": "List Backups",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/resilience/backup?page=1&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"resilience",
								"backup"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						},
						"description": "List available backups"
					},
					"response": []
				},
				{
					"name": "Restore Backup",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/resilience/backup/backup-id/restore",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"resilience",
								"backup",
								"backup-id",
								"restore"
							]
						},
						"description": "Restore system from backup"
					},
					"response": []
				}
			],
			"description": "System resilience and backup management endpoints"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-set base URL if not set",
					"if (!pm.collectionVariables.get('base_url')) {",
					"    pm.collectionVariables.set('base_url', 'http://localhost:3000');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script for all requests",
					"pm.test('Response time is less than 5000ms', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"pm.test('Response has success field', function () {",
					"    const response = pm.response.json();",
					"    pm.expect(response).to.have.property('success');",
					"});",
					"",
					"pm.test('Response has http_status_code field', function () {",
					"    const response = pm.response.json();",
					"    pm.expect(response).to.have.property('http_status_code');",
					"});",
					"",
					"// Validation-specific tests",
					"if (pm.response.code >= 400) {",
					"    pm.test('Error response has validation details', function () {",
					"        const response = pm.response.json();",
					"        if (response.http_status_code === 400) {",
					"            pm.expect(response).to.have.property('message');",
					"            // Check for validation error structure",
					"            if (response.errors) {",
					"                pm.expect(response.errors).to.be.an('array');",
					"            }",
					"        }",
					"    });",
					"}",
					"",
					"// Certificate-specific validation tests",
					"if (pm.request.url.path.includes('certificates')) {",
					"    if (pm.response.code === 200 || pm.response.code === 201) {",
					"        pm.test('Certificate response has required fields', function () {",
					"            const response = pm.response.json();",
					"            if (response.data && !Array.isArray(response.data)) {",
					"                pm.expect(response.data).to.have.property('id');",
					"                if (response.data.user_uuid) {",
					"                    pm.expect(response.data.user_uuid).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);",
					"                }",
					"            }",
					"        });",
					"        ",
					"        // Test for certificate generation (POST request)",
					"        if (pm.request.method === 'POST' && pm.request.url.path.includes('/certificates') && !pm.request.url.path.includes('/revoke')) {",
					"            pm.test('Generated certificate is TXT type', function () {",
					"                const response = pm.response.json();",
					"                if (response.data && response.data.content_type) {",
					"                    pm.expect(response.data.content_type).to.equal('text/plain');",
					"                }",
					"            });",
					"            ",
					"            pm.test('Generated certificate has file path', function () {",
					"                const response = pm.response.json();",
					"                if (response.data && response.data.file_path) {",
					"                    pm.expect(response.data.file_path).to.include('.txt');",
					"                }",
					"            });",
					"            ",
					"            pm.test('Generated certificate has file size', function () {",
					"                const response = pm.response.json();",
					"                if (response.data && response.data.file_size) {",
					"                    pm.expect(response.data.file_size).to.be.above(0);",
					"                }",
					"            });",
					"        }",
					"    }",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "user_uuid",
			"value": "",
			"type": "string"
		},
		{
			"key": "session_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "certificate_id",
			"value": "",
			"type": "string",
			"description": "UUID of certificate for validation and management operations"
		},
		{
			"key": "test_certificate_id",
			"value": "",
			"type": "string",
			"description": "UUID of test certificate for additional testing operations"
		},
		{
			"key": "admin_email",
			"value": "admin@example.com",
			"type": "string",
			"description": "Admin user email for authentication"
		},
		{
			"key": "admin_password",
			"value": "AdminPass123!",
			"type": "string",
			"description": "Admin user password for authentication"
		}
	]
}